// Importar el archivo JSON usando una funci√≥n as√≠ncrona
let signalsData = [];

// Funci√≥n para cargar los datos de se√±ales
async function loadSignalsData() {
  try {
    // Verificar si estamos en el navegador o en Node.js
    if (typeof window !== 'undefined') {
      // Navegador: usar fetch
      const response = await fetch('/src/signals.json');
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      signalsData = await response.json();
    } else {
      // Node.js: usar fs
      const fs = await import('fs');
      const path = await import('path');
      const signalsPath = path.join(process.cwd(), 'src', 'signals.json');
      const fileContent = fs.readFileSync(signalsPath, 'utf8');
      signalsData = JSON.parse(fileContent);
    }
    // console.log('‚úÖ Matriz de se√±ales cargada:', signalsData.length, 'se√±ales'); // Comentado: ya no usamos matriz de se√±ales
  } catch (error) {
    console.error('‚ùå Error cargando matriz de se√±ales:', error);
    signalsData = [];
  }
}

class SignalAnalysisService {
  constructor() {
    this.signalsMatrix = signalsData;
    this.signalCategories = this.extractCategories();
    // Cargar datos si no est√°n disponibles
    if (this.signalsMatrix.length === 0) {
      loadSignalsData().then(() => {
        this.signalsMatrix = signalsData;
        this.signalCategories = this.extractCategories();
      });
    }
  }

  // Extraer categor√≠as √∫nicas de la matriz
  extractCategories() {
    const categories = new Set();
    this.signalsMatrix.forEach(signal => {
      // Usar emocion_probable como categor√≠a principal
      const emotion = signal.emocion_probable;
      if (emotion) {
        // Dividir emociones m√∫ltiples y agregar cada una
        emotion.split(',').forEach(e => {
          categories.add(e.trim());
        });
      }
    });
    return Array.from(categories);
  }

  // PASO 1: Descripci√≥n objetiva sin interpretaci√≥n
  async getObjectiveDescription(mediaData, mediaType, geminiService) {
    try {
      const objectivePrompt = `Eres un observador experto en comportamiento canino. Tu tarea es describir √öNICAMENTE las se√±ales visuales del perro que ves en la imagen/video.

**IMPORTANTE - PROHIBIDO:**
‚ùå NO leas texto, subt√≠tulos, t√≠tulos o letras en el video/imagen
‚ùå NO describas contenido del video, solo el comportamiento del perro
‚ùå NO menciones palabras escritas, solo se√±ales visuales
‚ùå NO analices audio o sonidos, solo comportamiento visual

**DESCRIBE SOLO ESTO:**
- Postura corporal del perro
- Posici√≥n y movimiento de la cola
- Posici√≥n de las orejas
- Expresi√≥n de los ojos
- Posici√≥n de la boca y lengua
- Movimientos espec√≠ficos del cuerpo
- Gestos o acciones particulares

**FORMATO DE RESPUESTA:**
Responde √öNICAMENTE en formato JSON v√°lido, sin markdown, sin comillas adicionales:
{
  "postura": "descripci√≥n de la postura corporal",
  "cola": "descripci√≥n de la cola y su movimiento",
  "orejas": "descripci√≥n de las orejas",
  "ojos": "descripci√≥n de la mirada y expresi√≥n",
  "boca": "descripci√≥n de la boca y lengua",
  "movimientos": "descripci√≥n de movimientos espec√≠ficos",
  "sonidos": "si hay sonidos visibles (boca abierta, etc.)"
}

**RECUERDA:** Solo describe lo que ves del perro. NO leas texto, subt√≠tulos o letras. Responde SOLO el JSON, sin markdown.`;

      const mediaPart = await geminiService.prepareMediaForGemini(mediaData, mediaType);
      const result = await geminiService.model.generateContent([objectivePrompt, mediaPart]);
      const response = await result.response;
      let text = response.text();
      
      // Limpiar la respuesta de markdown si est√° presente
      text = text.trim();
      if (text.startsWith('```json')) {
        text = text.substring(7);
      }
      if (text.startsWith('```')) {
        text = text.substring(3);
      }
      if (text.endsWith('```')) {
        text = text.substring(0, text.length - 3);
      }
      text = text.trim();
      
      const description = JSON.parse(text);
      console.log('üî¨ Descripci√≥n objetiva:', description);
      
      return description;
      
    } catch (error) {
      console.error('‚ùå Error obteniendo descripci√≥n objetiva:', error);
      
      return {
        postura: "postura no determinada",
        cola: "cola no determinada", 
        orejas: "orejas no determinadas",
        ojos: "ojos no determinados",
        boca: "boca no determinada",
        movimientos: "movimientos no determinados",
        sonidos: "sonidos no determinados"
      };
    }
  }

  // PASO 2: Interpretaci√≥n usando la matriz de se√±ales
  async interpretWithSignalMatrix(objectiveDescription) {
    try {
      console.log('üîç Interpretando con matriz de se√±ales...');
      
      // DETECCI√ìN PRIORITARIA: Play Bow y se√±ales de juego
      const playBowDetection = this.detectPlayBow(objectiveDescription);
      if (playBowDetection.isPlayBow) {
        console.log('üéØ ¬°PLAY BOW DETECTADO! Prioridad absoluta a juego');
        return {
          translation: playBowDetection.translation,
          confidence: 95,
          emotion: 'juguet√≥n',
          behavior: this.formatBehaviorDescription(objectiveDescription),
          context: 'Invitaci√≥n clara a jugar',
          success: true
        };
      }
      
      // Buscar se√±ales que coincidan con la descripci√≥n
      const matchedSignals = this.findMatchingSignals(objectiveDescription);
      
      // Calcular conglomerado de comunicaci√≥n
      const conglomerate = this.calculateConglomerate(matchedSignals);
      
      // Generar interpretaci√≥n final
      const interpretation = this.generateFinalInterpretation(conglomerate, objectiveDescription);
      
      console.log('‚úÖ Interpretaci√≥n completada:', interpretation);
      return interpretation;
      
    } catch (error) {
      console.error('‚ùå Error en interpretaci√≥n:', error);
      const fallback = this.getFallbackInterpretation();
      return {
        ...fallback,
        success: true // Asegurar que siempre sea true
      };
    }
  }

  // DETECCI√ìN ESPEC√çFICA DE PLAY BOW
  detectPlayBow(description) {
    const postura = description.postura ? description.postura.toLowerCase() : '';
    const cola = description.cola ? description.cola.toLowerCase() : '';
    const movimientos = description.movimientos ? description.movimientos.toLowerCase() : '';
    
    // Patrones espec√≠ficos de Play Bow
    const playBowPatterns = [
      'pecho en el suelo',
      'pecho al suelo', 
      'pecho en suelo',
      'pecho al piso',
      'pecho en piso',
      'trasero arriba',
      'cadera arriba',
      'cola moviendo',
      'cola movi√©ndose',
      'cola agitada',
      'play bow',
      'postura de juego',
      'invitaci√≥n a jugar'
    ];
    
    // Verificar si hay coincidencias con patrones de Play Bow
    const hasPlayBowPattern = playBowPatterns.some(pattern => 
      postura.includes(pattern) || 
      cola.includes(pattern) || 
      movimientos.includes(pattern)
    );
    
    // Verificar elementos espec√≠ficos del Play Bow
    const hasChestDown = postura.includes('pecho') && (postura.includes('suelo') || postura.includes('piso'));
    const hasHipsUp = postura.includes('trasero') || postura.includes('cadera') || postura.includes('arriba');
    const hasTailMoving = cola.includes('moviendo') || cola.includes('agitada') || cola.includes('movimiento');
    
    // Es Play Bow si tiene al menos 2 de los 3 elementos clave
    const playBowScore = [hasChestDown, hasHipsUp, hasTailMoving].filter(Boolean).length;
    const isPlayBow = hasPlayBowPattern || playBowScore >= 2;
    
    if (isPlayBow) {
      return {
        isPlayBow: true,
        translation: '¬°Invitaci√≥n clara a jugar! Estoy emocionado y quiero que juegues conmigo',
        confidence: 95,
        pattern: 'Play Bow detectado'
      };
    }
    
    return {
      isPlayBow: false,
      translation: '',
      confidence: 0,
      pattern: 'No es Play Bow'
    };
  }

  // Buscar se√±ales que coincidan con la descripci√≥n objetiva
  findMatchingSignals(description) {
    const matches = [];
    
    this.signalsMatrix.forEach(signal => {
      let score = 0;
      const signalText = signal.senal.toLowerCase();
      const signalDesc = signal.descripcion.toLowerCase();
      const signalEmotion = signal.emocion_probable.toLowerCase();
      
      // BONUS ESPECIAL para se√±ales de juego
      let gameBonus = 1;
      if (signalText.includes('play bow') || 
          signalText.includes('juego') || 
          signalEmotion.includes('juego') ||
          signalEmotion.includes('invitaci√≥n')) {
        gameBonus = 2; // Doble puntuaci√≥n para se√±ales de juego
      }
      
      // Buscar coincidencias en postura
      if (description.postura && this.hasMatch(description.postura, signalText, signalDesc)) {
        score += this.getIntensityScore(signal['intensidad_1-5']) * gameBonus;
      }
      
      // Buscar coincidencias en cola
      if (description.cola && this.hasMatch(description.cola, signalText, signalDesc)) {
        score += this.getIntensityScore(signal['intensidad_1-5']) * gameBonus;
      }
      
      // Buscar coincidencias en orejas
      if (description.orejas && this.hasMatch(description.orejas, signalText, signalDesc)) {
        score += this.getIntensityScore(signal['intensidad_1-5']) * gameBonus;
      }
      
      // Buscar coincidencias en ojos
      if (description.ojos && this.hasMatch(description.ojos, signalText, signalDesc)) {
        score += this.getIntensityScore(signal['intensidad_1-5']) * gameBonus;
      }
      
      // Buscar coincidencias en boca
      if (description.boca && this.hasMatch(description.boca, signalText, signalDesc)) {
        score += this.getIntensityScore(signal['intensidad_1-5']) * gameBonus;
      }
      
      // Buscar coincidencias en movimientos
      if (description.movimientos && this.hasMatch(description.movimientos, signalText, signalDesc)) {
        score += this.getIntensityScore(signal['intensidad_1-5']) * gameBonus;
      }
      
      // Buscar coincidencias en sonidos
      if (description.sonidos && this.hasMatch(description.sonidos, signalText, signalDesc)) {
        score += this.getIntensityScore(signal['intensidad_1-5']) * gameBonus;
      }
      
      if (score > 0) {
        matches.push({
          ...signal,
          matchScore: score,
          gameBonus: gameBonus
        });
      }
    });
    
    // Ordenar por puntuaci√≥n de coincidencia
    return matches.sort((a, b) => b.matchScore - a.matchScore);
  }

  // Verificar si hay coincidencia entre descripci√≥n y se√±al
  hasMatch(description, signalText, signalDesc) {
    const desc = description.toLowerCase();
    
    // PRIORIDAD 1: Coincidencias exactas o muy espec√≠ficas
    if (signalText.includes(desc) || signalDesc.includes(desc)) {
      return true;
    }
    
    // PRIORIDAD 2: Coincidencias de frases completas (m√°s de 5 palabras)
    const descPhrases = desc.split(',').map(p => p.trim());
    for (const phrase of descPhrases) {
      if (phrase.split(' ').length > 5) {
        if (signalText.includes(phrase) || signalDesc.includes(phrase)) {
          return true;
        }
      }
    }
    
    // PRIORIDAD 3: Palabras clave espec√≠ficas y √∫nicas del Play Bow
    const playBowKeywords = ['play bow', 'pecho en suelo', 'cadera arriba', 'cola moviendo'];
    for (const keyword of playBowKeywords) {
      if (desc.includes(keyword)) {
        if (signalText.includes(keyword) || signalDesc.includes(keyword)) {
          return true;
        }
      }
    }
    
    // PRIORIDAD 4: Palabras clave espec√≠ficas de sumisi√≥n/miedo
    const submissionKeywords = ['encogido', 'entre piernas', 'hacia atr√°s', 'semicerrados', 'evitando', 'tensa', 'quieto'];
    for (const keyword of submissionKeywords) {
      if (desc.includes(keyword)) {
        if (signalText.includes(keyword) || signalDesc.includes(keyword)) {
          return true;
        }
      }
    }
    
    // PRIORIDAD 5: Palabras clave espec√≠ficas de agresi√≥n
    const aggressionKeywords = ['r√≠gido', 'tenso', 'amenazante', 'mirada intensa', 'mostrando dientes', 'inm√≥vil', 'amenaza'];
    for (const keyword of aggressionKeywords) {
      if (desc.includes(keyword)) {
        if (signalText.includes(keyword) || signalDesc.includes(keyword)) {
          return true;
        }
      }
    }
    
    // PRIORIDAD 6: Palabras clave espec√≠ficas de alegr√≠a y juego
    const joyKeywords = ['alegr√≠a', 'felices', 'brillantes', 'entusiasmo', 'energ√≠a', 'saltando', 'c√≠rculos', 'relajado'];
    for (const keyword of joyKeywords) {
      if (desc.includes(keyword)) {
        if (signalText.includes(keyword) || signalDesc.includes(keyword)) {
          return true;
        }
      }
    }
    
    // PRIORIDAD 7: Solo palabras muy espec√≠ficas y √∫nicas (m√≠nimo 7 caracteres)
    const descWords = desc.split(' ');
    
    return descWords.some(word => {
      if (word.length < 7) return false; // Aumentar el m√≠nimo para evitar falsos positivos
      
      // Evitar palabras muy comunes que pueden causar confusi√≥n
      const commonWords = ['est√°', 'con', 'del', 'las', 'los', 'una', 'para', 'como', 'muy', 'm√°s', 'sin', 'por', 'que', 'este', 'esta', 'eso', 'esa', 'hacia', 'sobre', 'entre', 'desde', 'hasta', 'pegada', 'pegadas', 'movimiento', 'movimientos', 'suelo', 'cuerpo', 'cabeza', 'cola', 'ojos', 'orejas', 'boca', 'postura', 'movimientos', 'sonidos'];
      if (commonWords.includes(word)) return false;
      
      // Solo palabras muy espec√≠ficas y √∫nicas
      const specificWords = ['encogido', 'semicerrados', 'evitando', 'quieto', 'tensa', 'pegada', 'pegadas', 'r√≠gido', 'tenso', 'amenazante', 'intensa', 'amenaza', 'inm√≥vil', 'mostrando', 'dientes', 'alegr√≠a', 'felices', 'brillantes', 'entusiasmo', 'energ√≠a', 'saltando', 'c√≠rculos', 'relajado'];
      if (specificWords.includes(word)) {
        return signalText.includes(word) || signalDesc.includes(word);
      }
      
      return false; // Solo palabras muy espec√≠ficas
    });
  }

  // Obtener puntuaci√≥n basada en intensidad
  getIntensityScore(intensidad) {
    // Intensidad m√°s alta = mayor puntuaci√≥n
    return parseInt(intensidad) || 1;
  }

  // Calcular conglomerado de comunicaci√≥n
  calculateConglomerate(matchedSignals) {
    if (matchedSignals.length === 0) {
      return {
        primaryEmotion: 'neutral',
        confidence: 50,
        signals: [],
        translation: 'No puedo interpretar claramente lo que veo'
      };
    }

    // PRIORIDAD ABSOLUTA: Verificar si hay Play Bow o se√±ales de juego claras
    const playBowSignals = matchedSignals.filter(signal => {
      const signalText = signal.senal.toLowerCase();
      const signalDesc = signal.descripcion.toLowerCase();
      const signalEmotion = signal.emocion_probable.toLowerCase();
      
      // DETECCI√ìN MUY ESPEC√çFICA DE PLAY BOW - solo el patr√≥n real
      const isPlayBow = (signalText.includes('play bow') || 
             signalText.includes('pecho al piso') ||
             signalText.includes('cadera arriba') ||
             signalDesc.includes('pecho en el suelo') ||
             signalDesc.includes('trasero arriba')) &&
             // DEBE contener elementos espec√≠ficos del Play Bow
             (signalText.includes('pecho') || signalDesc.includes('pecho')) &&
             (signalText.includes('suelo') || signalText.includes('piso') || signalDesc.includes('suelo') || signalDesc.includes('piso')) &&
             // EXCLUIR se√±ales que contengan elementos de agresi√≥n o tensi√≥n
             !signalText.includes('r√≠gido') &&
             !signalText.includes('tenso') &&
             !signalText.includes('amenaza') &&
             !signalText.includes('dominancia') &&
             !signalText.includes('erguido') &&
             !signalText.includes('amenazante') &&
             !signalText.includes('mirada intensa') &&
             !signalEmotion.includes('amenaza') &&
             !signalEmotion.includes('dominancia') &&
             // EXCLUIR si la descripci√≥n contiene elementos de agresi√≥n
             !signalDesc.includes('r√≠gido') &&
             !signalDesc.includes('tenso') &&
             !signalDesc.includes('amenaza') &&
             !signalDesc.includes('dominancia') &&
             !signalDesc.includes('erguido') &&
             !signalDesc.includes('amenazante');
      
      return isPlayBow;
    });

    if (playBowSignals.length > 0) {
      return {
        dominantEmotion: { 
          emotion: 'juguet√≥n', 
          signals: playBowSignals, 
          score: playBowSignals.reduce((sum, s) => sum + s.matchScore, 0) 
        },
        allSignals: matchedSignals,
        totalSignals: matchedSignals.length
      };
    }

    // PRIORIDAD ALTA: Verificar si hay se√±ales de agresi√≥n y amenaza
    const aggressionSignals = matchedSignals.filter(signal => {
      const signalText = signal.senal.toLowerCase();
      const signalDesc = signal.descripcion.toLowerCase();
      const signalEmotion = signal.emocion_probable.toLowerCase();
      
      const isAggression = signalText.includes('agresi√≥n') ||
             signalText.includes('defensa') ||
             signalText.includes('amenaza') ||
             signalText.includes('gru√±ido') ||
             signalText.includes('dientes') ||
             signalText.includes('advertencia') ||
             signalText.includes('dominancia') ||
             signalText.includes('intimidaci√≥n') ||
             signalText.includes('r√≠gido') ||
             signalText.includes('tenso') ||
             signalText.includes('amenazante') ||
             signalText.includes('mirada intensa') ||
             signalEmotion.includes('agresi√≥n') ||
             signalEmotion.includes('defensa') ||
             signalEmotion.includes('amenaza') ||
             signalEmotion.includes('dominancia');
      
      return isAggression;
    });

    if (aggressionSignals.length > 0) {
      return {
        dominantEmotion: { 
          emotion: 'agresivo', 
          signals: aggressionSignals, 
          score: aggressionSignals.reduce((sum, s) => sum + s.matchScore, 0) 
        },
        allSignals: matchedSignals,
        totalSignals: matchedSignals.length
      };
    }

    // Agrupar se√±ales por categor√≠as de emoci√≥n con l√≥gica mejorada
    const emotionCategories = {
      'miedoso': [],
      'ansioso': [],
      'juguet√≥n': [],
      'feliz': [],
      'curioso': [],
      'exigente': [],
      'neutral': []
    };

    matchedSignals.forEach(signal => {
      const signalText = signal.senal.toLowerCase();
      const signalDesc = signal.descripcion.toLowerCase();
      const signalEmotion = signal.emocion_probable.toLowerCase();
      
      // CLASIFICACI√ìN MEJORADA: Evitar confundir juego con sumisi√≥n
      if (signalText.includes('juego') || signalText.includes('diversi√≥n') ||
          signalText.includes('excitaci√≥n') || signalText.includes('play') ||
          signalText.includes('alegr√≠a') || signalEmotion.includes('juego') ||
          signalEmotion.includes('diversi√≥n') || signalEmotion.includes('invitaci√≥n')) {
        emotionCategories['juguet√≥n'].push(signal);
      } else if (signalText.includes('miedo') || signalText.includes('sumisi√≥n') ||
                 signalText.includes('inseguridad') || signalText.includes('evitaci√≥n') ||
                 signalEmotion.includes('miedo') || signalEmotion.includes('sumisi√≥n')) {
        // EXCEPCI√ìN: No clasificar como miedo si hay se√±ales de juego
        const hasGameSignals = matchedSignals.some(s => 
          s.senal.toLowerCase().includes('juego') || 
          s.emocion_probable.toLowerCase().includes('juego')
        );
        if (!hasGameSignals) {
          emotionCategories['miedoso'].push(signal);
        } else {
          emotionCategories['neutral'].push(signal); // Clasificar como neutral si hay conflicto
        }
      } else if (signalText.includes('ansiedad') || signalText.includes('estr√©s') ||
                 signalText.includes('nerviosismo') || signalEmotion.includes('ansiedad') ||
                 signalEmotion.includes('estr√©s')) {
        emotionCategories['ansioso'].push(signal);
      } else if (signalText.includes('felicidad') || signalText.includes('contento') ||
                 signalText.includes('relajaci√≥n') || signalEmotion.includes('felicidad') ||
                 signalEmotion.includes('relajaci√≥n')) {
        emotionCategories['feliz'].push(signal);
      } else if (signalText.includes('curiosidad') || signalText.includes('inter√©s') ||
                 signalText.includes('atenci√≥n') || signalEmotion.includes('curiosidad') ||
                 signalEmotion.includes('inter√©s')) {
        emotionCategories['curioso'].push(signal);
      } else if (signalText.includes('exigencia') || signalText.includes('atenci√≥n') ||
                 signalText.includes('insistencia') || signalEmotion.includes('exigencia')) {
        emotionCategories['exigente'].push(signal);
      } else {
        emotionCategories['neutral'].push(signal);
      }
    });

    // Encontrar la categor√≠a dominante
    let dominantCategory = null;
    let maxScore = 0;

    Object.entries(emotionCategories).forEach(([category, signals]) => {
      if (signals.length > 0) {
        const totalScore = signals.reduce((sum, signal) => sum + signal.matchScore, 0);
        if (totalScore > maxScore) {
          maxScore = totalScore;
          dominantCategory = { emotion: category, signals, score: totalScore };
        }
      }
    });

    return {
      dominantEmotion: dominantCategory,
      allSignals: matchedSignals,
      totalSignals: matchedSignals.length
    };
  }

  // Generar interpretaci√≥n final
  generateFinalInterpretation(conglomerate, description) {
    if (!conglomerate.dominantEmotion) {
      return {
        translation: 'No puedo interpretar claramente lo que veo',
        confidence: 30,
        emotion: 'neutral',
        behavior: this.formatBehaviorDescription(description),
        context: 'observaci√≥n sin interpretaci√≥n clara'
      };
    }

    const { emotion, signals } = conglomerate.dominantEmotion;
    
    // Obtener la se√±al principal (la de mayor puntuaci√≥n)
    const primarySignal = signals[0];
    
    // Calcular confianza basada en n√∫mero y puntuaci√≥n de se√±ales
    const confidence = Math.min(95, 50 + (signals.length * 10) + (primarySignal.matchScore * 5));
    
    // Determinar emoci√≥n principal
    const primaryEmotion = this.determinePrimaryEmotion(signals);
    
    // Generar traducci√≥n
    const translation = this.generateTranslation(primarySignal, signals);
    
    return {
      translation,
      confidence: Math.round(confidence),
      emotion: primaryEmotion,
      behavior: this.formatBehaviorDescription(description),
      context: this.determineContext(signals)
    };
  }

  // Determinar emoci√≥n principal
  determinePrimaryEmotion(signals) {
    // PRIORIDAD ABSOLUTA: Play Bow y se√±ales de juego claras
    const playBowSignals = signals.filter(signal => {
      const signalText = signal.senal.toLowerCase();
      const signalDesc = signal.descripcion.toLowerCase();
      const signalEmotion = signal.emocion_probable.toLowerCase();
      
      return signalText.includes('play bow') || 
             signalText.includes('pecho al piso') ||
             signalText.includes('cadera arriba') ||
             signalDesc.includes('pecho en el suelo') ||
             signalDesc.includes('trasero arriba') ||
             signalEmotion.includes('invitaci√≥n a jugar') ||
             signalEmotion.includes('juego');
    });

    // Si hay Play Bow, es definitivamente juego
    if (playBowSignals.length > 0) {
      return 'juguet√≥n';
    }

    // PRIORIDAD ALTA: Se√±ales de agresi√≥n y amenaza
    const aggressionSignals = signals.filter(signal => {
      const signalText = signal.senal.toLowerCase();
      const signalDesc = signal.descripcion.toLowerCase();
      const signalEmotion = signal.emocion_probable.toLowerCase();
      
      return signalText.includes('agresi√≥n') ||
             signalText.includes('defensa') ||
             signalText.includes('amenaza') ||
             signalText.includes('gru√±ido') ||
             signalText.includes('dientes') ||
             signalText.includes('advertencia') ||
             signalText.includes('dominancia') ||
             signalText.includes('intimidaci√≥n') ||
             signalText.includes('r√≠gido') ||
             signalText.includes('tenso') ||
             signalText.includes('amenazante') ||
             signalText.includes('mirada intensa') ||
             signalEmotion.includes('agresi√≥n') ||
             signalEmotion.includes('defensa') ||
             signalEmotion.includes('amenaza') ||
             signalEmotion.includes('dominancia');
    });

    if (aggressionSignals.length > 0) {
      return 'agresivo';
    }

    // PRIORIDAD ALTA: Se√±ales de miedo y sumisi√≥n
    const fearSignals = signals.filter(signal => {
      const signalText = signal.senal.toLowerCase();
      const signalDesc = signal.descripcion.toLowerCase();
      const signalEmotion = signal.emocion_probable.toLowerCase();
      
      return signalText.includes('miedo') ||
             signalText.includes('sumisi√≥n') ||
             signalText.includes('inseguridad') ||
             signalText.includes('evitaci√≥n') ||
             signalText.includes('encogido') ||
             signalText.includes('entre piernas') ||
             signalText.includes('hacia atr√°s') ||
             signalText.includes('semicerrados') ||
             signalText.includes('evitando') ||
             signalText.includes('tensa') ||
             signalText.includes('quieto') ||
             signalEmotion.includes('miedo') ||
             signalEmotion.includes('sumisi√≥n') ||
             signalEmotion.includes('incomodidad');
    });

    if (fearSignals.length > 0) {
      return 'miedoso';
    }

    // PRIORIDAD ALTA: Se√±ales de juego espec√≠ficas
    const gameSignals = signals.filter(signal => {
      const signalText = signal.senal.toLowerCase();
      const signalDesc = signal.descripcion.toLowerCase();
      const signalEmotion = signal.emocion_probable.toLowerCase();
      
      return signalText.includes('juego') ||
             signalText.includes('diversi√≥n') ||
             signalText.includes('excitaci√≥n') ||
             signalText.includes('alegr√≠a') ||
             signalText.includes('play') ||
             signalDesc.includes('juego') ||
             signalEmotion.includes('juego') ||
             signalEmotion.includes('diversi√≥n') ||
             signalEmotion.includes('excitaci√≥n');
    });

    if (gameSignals.length > 0) {
      return 'juguet√≥n';
    }

    // PRIORIDAD MEDIA: Otras emociones con puntuaci√≥n
    const emotionKeywords = {
      'ansioso': ['ansiedad', 'estr√©s', 'nerviosismo', 'inquietud', 'tensi√≥n'],
      'feliz': ['felicidad', 'contento', 'relajaci√≥n', 'bienestar', 'tranquilidad'],
      'curioso': ['curiosidad', 'inter√©s', 'atenci√≥n', 'exploraci√≥n', 'investigaci√≥n'],
      'exigente': ['exigencia', 'atenci√≥n', 'insistencia', 'demanda']
    };

    let maxScore = 0;
    let primaryEmotion = 'neutral';

    Object.entries(emotionKeywords).forEach(([emotion, keywords]) => {
      let score = 0;
      let highIntensityCount = 0;
      
      signals.forEach(signal => {
        const signalText = signal.senal.toLowerCase();
        const signalDesc = signal.descripcion.toLowerCase();
        const signalEmotion = signal.emocion_probable.toLowerCase();
        const intensity = signal['intensidad_1-5'];
        
        keywords.forEach(keyword => {
          if (signalText.includes(keyword) || 
              signalDesc.includes(keyword) || 
              signalEmotion.includes(keyword)) {
            score += signal.matchScore;
            // Dar bonus por alta intensidad
            if (intensity >= 4) {
              highIntensityCount++;
              score += 2; // Bonus adicional por alta intensidad
            }
          }
        });
      });
      
      if (score > maxScore) {
        maxScore = score;
        primaryEmotion = emotion;
      }
    });

    return primaryEmotion;
  }

  // Generar traducci√≥n
  generateTranslation(primarySignal, signals) {
    // Usar la interpretaci√≥n priorizada de la se√±al principal como base
    let translation = primarySignal.interpretacion_priorizada;
    
    // Si hay m√∫ltiples se√±ales, combinar informaci√≥n
    if (signals.length > 1) {
      const additionalContext = signals.slice(1, 3).map(s => s.interpretacion_priorizada).join(' ');
      translation = `${translation} ${additionalContext}`;
    }
    
    return translation;
  }

  // Formatear descripci√≥n de comportamiento
  formatBehaviorDescription(description) {
    const parts = [];
    
    if (description.postura) parts.push(`Postura: ${description.postura}`);
    if (description.cola) parts.push(`Cola: ${description.cola}`);
    if (description.orejas) parts.push(`Orejas: ${description.orejas}`);
    if (description.ojos) parts.push(`Ojos: ${description.ojos}`);
    if (description.boca) parts.push(`Boca: ${description.boca}`);
    if (description.movimientos) parts.push(`Movimientos: ${description.movimientos}`);
    if (description.sonidos) parts.push(`Sonidos: ${description.sonidos}`);
    
    return parts.join('. ');
  }

  // Determinar contexto
  determineContext(signals) {
    // Usar la emoci√≥n probable de la se√±al principal como contexto
    if (signals.length > 0) {
      return signals[0].emocion_probable;
    }
    return 'interacci√≥n general';
  }

  // Respuestas de fallback
  getFallbackDescription() {
    return {
      postura: 'postura no claramente visible',
      cola: 'cola no claramente visible',
      orejas: 'orejas no claramente visibles',
      ojos: 'ojos no claramente visibles',
      boca: 'boca no claramente visible',
      movimientos: 'movimientos no claramente visibles',
      sonidos: 'sin sonidos detectados'
    };
  }

  getFallbackInterpretation() {
    return {
      translation: 'No puedo interpretar claramente lo que veo',
      confidence: 20,
      emotion: 'neutral',
      behavior: 'comportamiento no claramente visible',
      context: 'sin contexto claro',
      success: true // Asegurar que siempre sea true
    };
  }

  // M√©todo principal para an√°lisis completo
  async analyzeWithSignalMatrix(mediaData, mediaType, geminiService) {
    try {
      console.log('üîç Iniciando an√°lisis con matriz de se√±ales...');
      
      // Paso 1: Obtener descripci√≥n objetiva
      const objectiveDescription = await this.getObjectiveDescription(mediaData, mediaType, geminiService);
      console.log('‚úÖ Descripci√≥n objetiva obtenida:', objectiveDescription);
      
      // Paso 2: Analizar con matriz de se√±ales
      const signalAnalysis = await this.interpretWithSignalMatrix(objectiveDescription);
      console.log('‚úÖ An√°lisis con matriz completado:', signalAnalysis);
      
      return {
        analysisMethod: 'signal-matrix',
        objectiveDescription,
        ...signalAnalysis,
        success: true // Asegurar que siempre sea true
      };
      
    } catch (error) {
      console.error('‚ùå Error en an√°lisis con matriz de se√±ales:', error);
      const fallback = this.getFallbackInterpretation();
      return {
        ...fallback,
        success: true // Asegurar que siempre sea true
      };
    }
  }
}

export default SignalAnalysisService;
