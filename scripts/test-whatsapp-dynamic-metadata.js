/**
 * Script de prueba para verificar metadatos din√°micos de WhatsApp
 * Este script debe ejecutarse en el navegador
 */

console.log('üß™ PRUEBA DE METADATOS DIN√ÅMICOS PARA WHATSAPP');
console.log('üìä Verificando que los metadatos se generen correctamente en el servidor');
console.log('');

// Funci√≥n para probar metadatos din√°micos
async function testDynamicMetadata() {
  console.log('üöÄ Iniciando prueba de metadatos din√°micos...');
  console.log('');

  try {
    // 1. Crear un video de prueba con datos del modelo de pensamiento
    console.log('1Ô∏è‚É£ Creando video de prueba...');
    const testVideo = {
      petName: 'Max',
      translation: '¬°Tengo hambre! Dame comida üçñ',
      emotionalDubbing: 'El perro est√° expresando necesidad de alimento',
      mediaUrl: 'https://images.unsplash.com/photo-1552053831-71594a27632d?w=400&h=600&fit=crop',
      mediaType: 'video',
      userId: 'test_user_' + Date.now(),
      tags: ['perro', 'hambre', 'comida'],
      duration: 30,
      resolution: '400x600',
      format: 'mp4'
    };
    
    console.log('üìù Video de prueba creado:');
    console.log('   - Pet Name:', testVideo.petName);
    console.log('   - Translation:', testVideo.translation);
    console.log('   - Media URL:', testVideo.mediaUrl);
    console.log('');

    // 2. Guardar video usando videoShareService
    console.log('2Ô∏è‚É£ Guardando video usando videoShareService...');
    const videoUrl = await window.videoShareService.storeVideoAndGenerateUrl(testVideo);
    console.log('‚úÖ Video guardado exitosamente');
    console.log('   - URL generada:', videoUrl);
    console.log('');

    // 3. Extraer videoId de la URL
    const videoId = videoUrl.split('/').pop();
    console.log('3Ô∏è‚É£ Video ID extra√≠do:', videoId);
    console.log('');

    // 4. Probar endpoint de preview con metadatos din√°micos
    console.log('4Ô∏è‚É£ Probando endpoint de preview con metadatos din√°micos...');
    const previewUrl = `http://localhost:5173/api/video-preview/${videoId}`;
    console.log('   - Preview URL:', previewUrl);
    console.log('');

    // 5. Hacer request al endpoint y verificar metadatos
    console.log('5Ô∏è‚É£ Verificando metadatos generados en el servidor...');
    const response = await fetch(previewUrl);
    const html = await response.text();
    
    // Extraer metadatos del HTML
    const titleMatch = html.match(/<title>(.*?)<\/title>/);
    const ogTitleMatch = html.match(/<meta property="og:title" content="(.*?)" \/>/);
    const ogDescriptionMatch = html.match(/<meta property="og:description" content="(.*?)" \/>/);
    const ogImageMatch = html.match(/<meta property="og:image" content="(.*?)" \/>/);
    
    console.log('üìä Metadatos extra√≠dos del HTML:');
    console.log('   - Title:', titleMatch ? titleMatch[1] : 'No encontrado');
    console.log('   - OG Title:', ogTitleMatch ? ogTitleMatch[1] : 'No encontrado');
    console.log('   - OG Description:', ogDescriptionMatch ? ogDescriptionMatch[1] : 'No encontrado');
    console.log('   - OG Image:', ogImageMatch ? ogImageMatch[1] : 'No encontrado');
    console.log('');

    // 6. Verificar que los metadatos sean din√°micos
    console.log('6Ô∏è‚É£ Verificando que los metadatos sean din√°micos...');
    const expectedTitle = `¬°Mira lo que dice ${testVideo.petName}! üêï`;
    const expectedDescription = `"${testVideo.translation}"`;
    
    const isTitleCorrect = ogTitleMatch && ogTitleMatch[1] === expectedTitle;
    const isDescriptionCorrect = ogDescriptionMatch && ogDescriptionMatch[1] === expectedDescription;
    const isImageCorrect = ogImageMatch && ogImageMatch[1] === testVideo.mediaUrl;
    
    console.log('‚úÖ Verificaciones:');
    console.log('   - T√≠tulo din√°mico:', isTitleCorrect ? '‚úÖ CORRECTO' : '‚ùå INCORRECTO');
    console.log('   - Descripci√≥n din√°mica:', isDescriptionCorrect ? '‚úÖ CORRECTO' : '‚ùå INCORRECTO');
    console.log('   - Imagen din√°mica:', isImageCorrect ? '‚úÖ CORRECTO' : '‚ùå INCORRECTO');
    console.log('');

    // 7. Abrir preview en nueva pesta√±a
    console.log('7Ô∏è‚É£ Abriendo preview en nueva pesta√±a...');
    window.open(previewUrl, '_blank');
    console.log('');

    // 8. Probar compartir en WhatsApp
    console.log('8Ô∏è‚É£ Probando compartir en WhatsApp...');
    const shareText = `¬°Mira lo que dice ${testVideo.petName}! üêï\n\n"${testVideo.translation}"\n\nVer video: ${videoUrl}`;
    const whatsappUrl = `https://wa.me/?text=${encodeURIComponent(shareText)}`;
    
    console.log('   - Texto de compartir:', shareText);
    console.log('   - URL de WhatsApp:', whatsappUrl);
    console.log('   - Abriendo WhatsApp...');
    
    window.open(whatsappUrl, '_blank');
    console.log('');

    // 9. Resumen de la prueba
    console.log('üìä RESUMEN DE LA PRUEBA:');
    console.log('   ‚úÖ Video creado con datos del modelo de pensamiento');
    console.log('   ‚úÖ Video guardado en base de datos');
    console.log('   ‚úÖ Metadatos generados din√°micamente en el servidor');
    console.log('   ‚úÖ T√≠tulo din√°mico:', isTitleCorrect ? 'FUNCIONA' : 'FALLA');
    console.log('   ‚úÖ Descripci√≥n din√°mica:', isDescriptionCorrect ? 'FUNCIONA' : 'FALLA');
    console.log('   ‚úÖ Imagen din√°mica:', isImageCorrect ? 'FUNCIONA' : 'FALLA');
    console.log('   ‚úÖ Preview abierto en nueva pesta√±a');
    console.log('   ‚úÖ WhatsApp abierto con enlace');
    console.log('');
    
    if (isTitleCorrect && isDescriptionCorrect && isImageCorrect) {
      console.log('üéâ ¬°METADATOS DIN√ÅMICOS FUNCIONANDO PERFECTAMENTE!');
      console.log('   - WhatsApp ahora mostrar√° el preview correcto');
      console.log('   - Los metadatos se generan en el servidor');
      console.log('   - No hay dependencia de JavaScript del cliente');
      console.log('   - El modelo de pensamiento se preserva intacto');
    } else {
      console.log('‚ùå Algunos metadatos no se generaron correctamente');
      console.log('   - Revisar la implementaci√≥n del servidor');
    }

  } catch (error) {
    console.error('üí• Error en la prueba:', error);
  }
}

// Funci√≥n para verificar metadatos de un video espec√≠fico
async function checkVideoMetadata(videoId) {
  console.log('üîç Verificando metadatos del video:', videoId);
  
  try {
    const previewUrl = `http://localhost:5173/api/video-preview/${videoId}`;
    const response = await fetch(previewUrl);
    const html = await response.text();
    
    // Extraer metadatos
    const titleMatch = html.match(/<title>(.*?)<\/title>/);
    const ogTitleMatch = html.match(/<meta property="og:title" content="(.*?)" \/>/);
    const ogDescriptionMatch = html.match(/<meta property="og:description" content="(.*?)" \/>/);
    const ogImageMatch = html.match(/<meta property="og:image" content="(.*?)" \/>/);
    
    console.log('üìä Metadatos del video:');
    console.log('   - Title:', titleMatch ? titleMatch[1] : 'No encontrado');
    console.log('   - OG Title:', ogTitleMatch ? ogTitleMatch[1] : 'No encontrado');
    console.log('   - OG Description:', ogDescriptionMatch ? ogDescriptionMatch[1] : 'No encontrado');
    console.log('   - OG Image:', ogImageMatch ? ogImageMatch[1] : 'No encontrado');
    
    // Abrir preview
    window.open(previewUrl, '_blank');
    
  } catch (error) {
    console.error('‚ùå Error verificando metadatos:', error);
  }
}

// Hacer las funciones disponibles globalmente
window.testDynamicMetadata = testDynamicMetadata;
window.checkVideoMetadata = checkVideoMetadata;

console.log('üöÄ Para ejecutar la prueba completa, ejecuta:');
console.log('   testDynamicMetadata()');
console.log('');
console.log('üîç Para verificar un video espec√≠fico, ejecuta:');
console.log('   checkVideoMetadata("test_integration_1757633000")');
console.log('');
console.log('üìã O copia y pega este c√≥digo en la consola del navegador:');
console.log('');
console.log(`
// Test de metadatos din√°micos
async function testMetadata() {
  const testVideo = {
    petName: 'Luna',
    translation: '¬°Quiero jugar! üéæ',
    mediaUrl: 'https://images.unsplash.com/photo-1552053831-71594a27632d?w=400&h=600&fit=crop',
    mediaType: 'video'
  };
  
  const videoUrl = await window.videoShareService.storeVideoAndGenerateUrl(testVideo);
  const videoId = videoUrl.split('/').pop();
  const previewUrl = 'http://localhost:5173/api/video-preview/' + videoId;
  
  console.log('Video URL:', videoUrl);
  console.log('Preview URL:', previewUrl);
  
  window.open(previewUrl, '_blank');
}

testMetadata();
`);
