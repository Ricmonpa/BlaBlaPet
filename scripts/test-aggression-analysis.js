import fs from 'fs';
import path from 'path';

// Simular el an√°lisis de se√±ales de agresi√≥n
function testAggressionAnalysis() {
  try {
    console.log('üîß Probando an√°lisis de se√±ales de agresi√≥n...');
    
    // Cargar el archivo JSON
    const signalsPath = path.join(process.cwd(), 'src', 'signals.json');
    const signalsData = JSON.parse(fs.readFileSync(signalsPath, 'utf8'));
    
    // Simular descripci√≥n objetiva de un perro agresivo
    const aggressiveDescription = {
      postura: "cuerpo tenso y r√≠gido",
      cola: "cola r√≠gida en alto",
      orejas: "orejas hacia atr√°s",
      ojos: "mirada fija intensa",
      boca: "mostrando dientes, labios retra√≠dos",
      movimientos: "cuerpo r√≠gido previo a ataque",
      sonidos: "gru√±ido bajo y constante"
    };
    
    console.log('üìã Descripci√≥n objetiva simulada:');
    console.log(JSON.stringify(aggressiveDescription, null, 2));
    
    // Buscar se√±ales que coincidan con agresi√≥n
    const aggressiveSignals = signalsData.filter(signal => {
      const signalText = signal.senal.toLowerCase();
      const signalDesc = signal.descripcion.toLowerCase();
      const signalEmotion = signal.emocion_probable.toLowerCase();
      
      const aggressiveKeywords = [
        'agresi√≥n', 'defensa', 'amenaza', 'gru√±ido', 'mostrar dientes',
        'advertencia', 'dominancia', 'tenso', 'r√≠gido', 'fijo'
      ];
      
      return aggressiveKeywords.some(keyword => 
        signalText.includes(keyword) || 
        signalDesc.includes(keyword) || 
        signalEmotion.includes(keyword)
      );
    });
    
    console.log(`\nüîç Se√±ales de agresi√≥n encontradas: ${aggressiveSignals.length}`);
    
    if (aggressiveSignals.length > 0) {
      console.log('\nüìã Se√±ales de agresi√≥n identificadas:');
      aggressiveSignals.slice(0, 10).forEach(signal => {
        console.log(`  - ${signal.numero}: ${signal.senal}`);
        console.log(`    Descripci√≥n: ${signal.descripcion}`);
        console.log(`    Emoci√≥n: ${signal.emocion_probable}`);
        console.log(`    Intensidad: ${signal['intensidad_1-5']}`);
        console.log(`    Interpretaci√≥n: ${signal.interpretacion_priorizada}`);
        console.log('');
      });
    }
    
    // Simular b√∫squeda de coincidencias espec√≠ficas
    console.log('üîç Buscando coincidencias espec√≠ficas con la descripci√≥n:');
    
    const matches = [];
    signalsData.forEach(signal => {
      let score = 0;
      const signalText = signal.senal.toLowerCase();
      const signalDesc = signal.descripcion.toLowerCase();
      
      // Buscar coincidencias en postura
      if (aggressiveDescription.postura.includes('tenso') && 
          (signalText.includes('tenso') || signalDesc.includes('tenso'))) {
        score += signal['intensidad_1-5'];
      }
      
      // Buscar coincidencias en cola
      if (aggressiveDescription.cola.includes('r√≠gida') && 
          (signalText.includes('r√≠gida') || signalDesc.includes('r√≠gida'))) {
        score += signal['intensidad_1-5'];
      }
      
      // Buscar coincidencias en orejas
      if (aggressiveDescription.orejas.includes('atr√°s') && 
          (signalText.includes('atr√°s') || signalDesc.includes('atr√°s'))) {
        score += signal['intensidad_1-5'];
      }
      
      // Buscar coincidencias en ojos
      if (aggressiveDescription.ojos.includes('fija') && 
          (signalText.includes('fija') || signalDesc.includes('fija'))) {
        score += signal['intensidad_1-5'];
      }
      
      // Buscar coincidencias en boca
      if (aggressiveDescription.boca.includes('dientes') && 
          (signalText.includes('dientes') || signalDesc.includes('dientes'))) {
        score += signal['intensidad_1-5'];
      }
      
      // Buscar coincidencias en movimientos
      if (aggressiveDescription.movimientos.includes('r√≠gido') && 
          (signalText.includes('r√≠gido') || signalDesc.includes('r√≠gido'))) {
        score += signal['intensidad_1-5'];
      }
      
      // Buscar coincidencias en sonidos
      if (aggressiveDescription.sonidos.includes('gru√±ido') && 
          (signalText.includes('gru√±ido') || signalDesc.includes('gru√±ido'))) {
        score += signal['intensidad_1-5'];
      }
      
      if (score > 0) {
        matches.push({
          ...signal,
          matchScore: score
        });
      }
    });
    
    // Ordenar por puntuaci√≥n
    matches.sort((a, b) => b.matchScore - a.matchScore);
    
    console.log(`\n‚úÖ Coincidencias encontradas: ${matches.length}`);
    
    if (matches.length > 0) {
      console.log('\nüìã Top 5 coincidencias:');
      matches.slice(0, 5).forEach((signal, index) => {
        console.log(`${index + 1}. ${signal.numero}: ${signal.senal} (Score: ${signal.matchScore})`);
        console.log(`   Emoci√≥n: ${signal.emocion_probable}`);
        console.log(`   Interpretaci√≥n: ${signal.interpretacion_priorizada}`);
        console.log('');
      });
      
      // Simular interpretaci√≥n final
      const primarySignal = matches[0];
      const confidence = Math.min(95, 50 + (matches.length * 10) + (primarySignal.matchScore * 5));
      
      console.log('üéØ Interpretaci√≥n final simulada:');
      console.log(`Traducci√≥n: ${primarySignal.interpretacion_priorizada}`);
      console.log(`Confianza: ${Math.round(confidence)}%`);
      console.log(`Emoci√≥n: ${primarySignal.emocion_probable}`);
    }
    
    console.log('\nüéâ ¬°Prueba de an√°lisis de agresi√≥n completada!');
    
  } catch (error) {
    console.error('‚ùå Error en la prueba:', error.message);
  }
}

// Ejecutar la prueba
testAggressionAnalysis();
