import SignalAnalysisService from '../src/services/signalAnalysisService.js';

// Simular el an√°lisis en dos pasos
async function testTwoStepAnalysis() {
  try {
    console.log('üîß Probando an√°lisis en dos pasos...');
    
    // Crear instancia del servicio
    const service = new SignalAnalysisService();
    
    // Simular descripci√≥n objetiva de un perro agresivo (PASO 1)
    const objectiveDescription = {
      postura: "cuerpo tenso y r√≠gido",
      cola: "cola r√≠gida en alto",
      orejas: "orejas hacia atr√°s",
      ojos: "mirada fija intensa",
      boca: "mostrando dientes, labios retra√≠dos",
      movimientos: "cuerpo r√≠gido previo a ataque",
      sonidos: "gru√±ido bajo y constante"
    };
    
    console.log('üìã PASO 1 - Descripci√≥n objetiva:');
    console.log(JSON.stringify(objectiveDescription, null, 2));
    
    // PASO 2: Interpretaci√≥n usando la matriz de se√±ales
    console.log('\nüîç PASO 2 - Interpretando con matriz de se√±ales...');
    
    // Buscar se√±ales que coincidan
    const matchedSignals = service.findMatchingSignals(objectiveDescription);
    console.log(`‚úÖ Se√±ales encontradas: ${matchedSignals.length}`);
    
    if (matchedSignals.length > 0) {
      console.log('\nüìã Top 5 se√±ales coincidentes:');
      matchedSignals.slice(0, 5).forEach((signal, index) => {
        console.log(`${index + 1}. ${signal.numero}: ${signal.senal} (Score: ${signal.matchScore})`);
        console.log(`   Descripci√≥n: ${signal.descripcion}`);
        console.log(`   Emoci√≥n: ${signal.emocion_probable}`);
        console.log(`   Intensidad: ${signal['intensidad_1-5']}`);
        console.log(`   Interpretaci√≥n: ${signal.interpretacion_priorizada}`);
        console.log('');
      });
      
      // Calcular conglomerado
      const conglomerate = service.calculateConglomerate(matchedSignals);
      console.log('üìä Conglomerado calculado:');
      console.log(`Emoci√≥n dominante: ${conglomerate.dominantEmotion?.emotion || 'N/A'}`);
      console.log(`Total de se√±ales: ${conglomerate.totalSignals}`);
      
      // Generar interpretaci√≥n final
      const interpretation = service.generateFinalInterpretation(conglomerate, objectiveDescription);
      console.log('\nüéØ Interpretaci√≥n final:');
      console.log(`Traducci√≥n: ${interpretation.translation}`);
      console.log(`Confianza: ${interpretation.confidence}%`);
      console.log(`Emoci√≥n: ${interpretation.emotion}`);
      console.log(`Comportamiento: ${interpretation.behavior}`);
      console.log(`Contexto: ${interpretation.context}`);
    }
    
    console.log('\nüéâ ¬°An√°lisis en dos pasos completado exitosamente!');
    console.log('‚úÖ El sistema est√° funcionando correctamente con la matriz ampliada');
    
  } catch (error) {
    console.error('‚ùå Error en la prueba:', error.message);
    console.error('Stack trace:', error.stack);
  }
}

// Ejecutar la prueba
testTwoStepAnalysis();
